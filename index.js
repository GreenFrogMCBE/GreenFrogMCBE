/**
 * ░██████╗░██████╗░███████╗███████╗███╗░░██╗███████╗██████╗░░█████╗░░██████╗░
 * ██╔════╝░██╔══██╗██╔════╝██╔════╝████╗░██║██╔════╝██╔══██╗██╔══██╗██╔════╝░
 * ██║░░██╗░██████╔╝█████╗░░█████╗░░██╔██╗██║█████╗░░██████╔╝██║░░██║██║░░██╗░
 * ██║░░╚██╗██╔══██╗██╔══╝░░██╔══╝░░██║╚████║██╔══╝░░██╔══██╗██║░░██║██║░░╚██╗
 * ╚██████╔╝██║░░██║███████╗███████╗██║░╚███║██║░░░░░██║░░██║╚█████╔╝╚██████╔╝
 * ░╚═════╝░╚═╝░░╚═╝╚══════╝╚══════╝╚═╝░░╚══╝╚═╝░░░░░╚═╝░░╚═╝░╚════╝░░╚═════╝░
 *
 * The content of this file is licensed using the CC-BY-4.0 license
 * which requires you to agree to its terms if you wish to use or make any changes to it.
 *
 * @license CC-BY-4.0
 * @link Github - https://github.com/GreenFrogMCBE/GreenFrogMCBE
 * @link Discord - https://discord.gg/UFqrnAbqjP
 */
const fs = require("fs")
const path = require("path")

// These variables are initialized within the `initialize_server()` function.
//
// This is necessary because both of them rely on the `config.yml` file,
// which is generated by the initialize_server() function.
// Failing to initialize them in this way would result in the 
// "ENOENT: no such file or directory, open 'config.yml'" error
let Frog
let Server

const ConsoleColorConvertor = require("./src/utils/ConsoleColorConvertor")
const Colors = require("./src/utils/types/Colors")

/**
 * @type {string}
 */
const DEFAULT_CONFIG_NAME = "config.yml"

/**
 * @type {Error} error
 * @returns {string}
 */
function generate_fail_message(error) {
	const message = `${Colors.RED}Failed to start the server
			${error.stack}

			Make sure that you have the required libraries. Run "npm i" to install them
			If you are sure that this is a bug, please report it here: https://github.com/GreenFrogMCBE/GreenFrogMCBE
			${Colors.RESET}
			`

	return message
		.replaceAll("	", "")
}

/**
 * @type {string}
 */
const crashFile = `./crash-reports/server-crash-${Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)}.txt`

/**
 * Creates configuration files and sets up debugging if necessary.
 * @async
 */
async function initialize_server() {
	if (!fs.existsSync(DEFAULT_CONFIG_NAME)) {
		const config_path = path.join(__dirname, ".", "src", "resources", "yml", "defaultConfig.yml")
		const config = fs.readFileSync(config_path)

		fs.writeFileSync(DEFAULT_CONFIG_NAME, config)
	}

	Frog = require("./src/Frog")

	if (Frog.is_debug) {
		process.env.DEBUG = "minecraft-protocol"
	}

	Server = require("./src/Server")
}

(async () => {
	try {
		await initialize_server()

		Server.start()
	} catch (error) {
		console.error(
			ConsoleColorConvertor.convert_console_color(generate_fail_message(error)),
		)

		fs.mkdirSync(Frog.directories.crashReportsFolder, { recursive: true })
		fs.writeFileSync(crashFile, `Error: ${error.stack}`)

		process.exit(Frog.config.dev.exitCodes.crash)
	}
})()
