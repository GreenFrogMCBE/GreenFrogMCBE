/**
 * ░██████╗░██████╗░███████╗███████╗███╗░░██╗███████╗██████╗░░█████╗░░██████╗░
 * ██╔════╝░██╔══██╗██╔════╝██╔════╝████╗░██║██╔════╝██╔══██╗██╔══██╗██╔════╝░
 * ██║░░██╗░██████╔╝█████╗░░█████╗░░██╔██╗██║█████╗░░██████╔╝██║░░██║██║░░██╗░
 * ██║░░╚██╗██╔══██╗██╔══╝░░██╔══╝░░██║╚████║██╔══╝░░██╔══██╗██║░░██║██║░░╚██╗
 * ╚██████╔╝██║░░██║███████╗███████╗██║░╚███║██║░░░░░██║░░██║╚█████╔╝╚██████╔╝
 * ░╚═════╝░╚═╝░░╚═╝╚══════╝╚══════╝╚═╝░░╚══╝╚═╝░░░░░╚═╝░░╚═╝░╚════╝░░╚═════╝░
 *
 * The content of this file is licensed using the CC-BY-4.0 license
 * which requires you to agree to its terms if you wish to use or make any changes to it.
 *
 * @license CC-BY-4.0
 * @link Github - https://github.com/GreenFrogMCBE/GreenFrogMCBE
 * @link Discord - https://discord.gg/UFqrnAbqjP
 */
const Random = require("../utils/Random")

const {
	CriterinaName,
	DisplaySlot,
	ScoreAction,
	EntryType,
} = require("@greenfrog/mc-enums")

const ServerScoreboardObjectivePacket = require("../network/packets/ServerSetDisplayObjectivePacket")
const ServerRemoveObjectivePacket = require("../network/packets/ServerRemoveObjectivePacket")
const ServerSetScorePacket = require("../network/packets/ServerSetScorePacket")

const Frog = require("../Frog")

const { get_key } = require("../utils/Language")

/**
 * Represents a scoreboard that can be displayed to a player.
 */
class Scoreboard {
	constructor() {
		/** @type {string} */
		this.display_name = get_key("scoreboard.name.default")

		/** @type {import("Frog").DisplaySlot} */
		this.display_slot = DisplaySlot.Sidebar

		/** @type {import("Frog").CreteriaName} */
		this.criteria_name = CreteriaName.Dummy

		/**
		 * @type {string} - The name of the scoreboard
		 * A random string is generated by default.
		 */
		this.objective_name = new Random()
			.generate_random_string(5)

		/** @type {number} */
		this.sort_order = 1

		/** @type {import("Frog").Player} - The player to who the scoreboard will be displayed. */
		this.player
	}

	/**
	 * Sends the scoreboard to the player.
	 */
	send() {
		let should_create_scoreboard = true

		Frog.event_emitter.emit("scoreboardCreate", {
			scoreboard: this,
			cancel: () => {
				should_create_scoreboard = false
			},
		})

		if (!should_create_scoreboard) return

		const scoreboard = new ServerScoreboardObjectivePacket()
		scoreboard.criteria_name = this.criteria_name
		scoreboard.display_name = this.display_name
		scoreboard.display_slot = this.display_slot
		scoreboard.objective_name = this.objective_name
		scoreboard.sort_order = this.sort_order
		scoreboard.write_packet(this.player)
	}

	/**
	 * Sets a score on the scoreboard.
	 *
	 * @param {number} score - The score to set.
	 * @param {string} text - The text to display alongside the score.
	 * @param {import("Frog").EntryType} [entry_type=EntryType.TEXT] - The types of the score entry.
	 * @param {number} [entity_unique_id] - The unique ID of the entity associated with the score.
	 */
	setScore(score, text, entry_type = EntryType.TEXT, entity_unique_id = undefined) {
		let should_set_score = true

		Frog.event_emitter.emit("scoreboardSetScore", {
			scoreboard: this,
			cancel: () => {
				should_set_score = false
			},
		})

		if (!should_set_score) return

		const set_score_packet = new ServerSetScorePacket()
		set_score_packet.action = ScoreAction.UPDATE
		set_score_packet.entries = [
			{
				scoreboard_id: 1,
				objective_name: this.objective_name,
				score: score,
				entry_type,
				entity_unique_id,
				custom_name: text,
			},
		]
		set_score_packet.write_packet(this.player)
	}

	/**
	 * Deletes a score on the scoreboard.
	 *
	 * @param {number} score - The score to set.
	 */
	deleteScore(score) {
		let should_delete_score = true

		Frog.event_emitter.emit("scoreboardScoreDelete", {
			scoreboard: this,
			cancel: () => {
				should_delete_score = false
			},
		})

		if (!should_delete_score) return

		const set_score_packet = new ServerSetScorePacket()
		set_score_packet.action = ScoreAction.REMOVE
		set_score_packet.entries = [
			{
				scoreboard_id: 1,
				objective_name: this.objective_name,
				score,
				entry_types: EntryType.TEXT,
				entity_unique_id: undefined,
				custom_name: "",
			},
		]
		set_score_packet.write_packet(this.player)
	}

	/**
	 * Deletes the scoreboard
	 */
	delete() {
		let should_delete = true

		Frog.event_emitter.emit("scoreboardDelete", {
			scoreboard: this,
			cancel: () => {
				should_delete = false
			},
		})

		if (!should_delete) return

		const remove_scoreboard = new ServerRemoveObjectivePacket()
		remove_scoreboard.objective_name = this.objective_name
		remove_scoreboard.write_packet(this.player)
	}
}

module.exports = Scoreboard
