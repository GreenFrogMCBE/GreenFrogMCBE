/**
 * ░██████╗░██████╗░███████╗███████╗███╗░░██╗███████╗██████╗░░█████╗░░██████╗░
 * ██╔════╝░██╔══██╗██╔════╝██╔════╝████╗░██║██╔════╝██╔══██╗██╔══██╗██╔════╝░
 * ██║░░██╗░██████╔╝█████╗░░█████╗░░██╔██╗██║█████╗░░██████╔╝██║░░██║██║░░██╗░
 * ██║░░╚██╗██╔══██╗██╔══╝░░██╔══╝░░██║╚████║██╔══╝░░██╔══██╗██║░░██║██║░░╚██╗
 * ╚██████╔╝██║░░██║███████╗███████╗██║░╚███║██║░░░░░██║░░██║╚█████╔╝╚██████╔╝
 * ░╚═════╝░╚═╝░░╚═╝╚══════╝╚══════╝╚═╝░░╚══╝╚═╝░░░░░╚═╝░░╚═╝░╚════╝░░╚═════╝░
 *
 * The content of this file is licensed using the CC-BY-4.0 license
 * which requires you to agree to its terms if you wish to use or make any changes to it.
 *
 * @license CC-BY-4.0
 * @link Github - https://github.com/GreenFrogMCBE/GreenFrogMCBE
 * @link Discord - https://discord.gg/UFqrnAbqjP
 */
const Random = require("../utils/Random");

const CreteriaName = require("./types/CreteriaName");
const DisplaySlot = require("./types/DisplaySlot");
const EntryType = require("./types/EntryType");
const ScoreAction = require("./types/ScoreAction");

const ServerScoreboardObjectivePacket = require("../network/packets/ServerSetDisplayObjectivePacket");
const ServerSetScorePacket = require("../network/packets/ServerSetScorePacket");
const ServerRemoveObjectivePacket = require("../network/packets/ServerRemoveObjectivePacket");

const Frog = require("../Frog");

const { getKey } = require("../utils/Language");

/**
 * Represents a scoreboard that can be displayed to a player.
 */
class Scoreboard {
	constructor() {
		/** @type {string} */
		this.displayName = getKey("scoreboard.name.default");

		/** @type {import("Frog").DisplaySlot} */
		this.displaySlot = DisplaySlot.SIDEBAR;

		/** @type {import("Frog").CreteriaName} */
		this.criteriaName = CreteriaName.DUMMY;

		/**
		 * @type {string} - The name of the scoreboard
		 * A random string is generated by default.
		 */
		this.objectiveName = new Random().generateRandomString(5);

		/** @type {number} */
		this.sortOrder = 1;

		/** @type {import("Frog").Player} - The player to who the scoreboard will be displayed. */
		this.player;
	}

	/**
	 * Sends the scoreboard to the player.
	 */
	sendScoreboard() {
		let shouldCreateScoreboard = true;

		Frog.eventEmitter.emit("scoreboardCreate", {
			scoreboard: this,
			cancel: () => {
				shouldCreateScoreboard = false;
			},
		});

		if (!shouldCreateScoreboard) return;

		const scoreboard = new ServerScoreboardObjectivePacket();
		scoreboard.criteria_name = this.criteriaName;
		scoreboard.display_name = this.displayName;
		scoreboard.display_slot = this.displaySlot;
		scoreboard.objective_name = this.objectiveName;
		scoreboard.sort_order = this.sortOrder;
		scoreboard.writePacket(this.player);
	}

	/**
	 * Sets a score on the scoreboard.
	 *
	 * @param {number} score - The score to set.
	 * @param {string} text - The text to display alongside the score.
	 * @param {import("Frog").EntryType} [entry_types=EntryType.TEXT] - The types of the score entry.
	 * @param {number} [entity_unique_id] - The unique ID of the entity associated with the score.
	 */
	setScore(score, text, entry_types = EntryType.TEXT, entity_unique_id = undefined) {
		let shouldSetScore = true;

		Frog.eventEmitter.emit("scoreboardSetScore", {
			scoreboard: this,
			cancel: () => {
				shouldSetScore = false;
			},
		});

		if (!shouldSetScore) return;

		const setScorePacket = new ServerSetScorePacket();
		setScorePacket.action = ScoreAction.UPDATE;
		setScorePacket.entries = [
			{
				scoreboard_id: 1,
				objective_name: this.objectiveName,
				score: score,
				entry_types: entry_types,
				entity_unique_id: entity_unique_id,
				custom_name: text,
			},
		];
		setScorePacket.writePacket(this.player);
	}

	/**
	 * Deletes a score on the scoreboard.
	 *
	 * @param {number} score - The score to set.
	 */
	deleteScore(score) {
		let shouldDeleteScore = true;

		Frog.eventEmitter.emit("scoreboardScoreDelete", {
			scoreboard: this,
			cancel: () => {
				shouldDeleteScore = false;
			},
		});

		if (!shouldDeleteScore) return;

		const setScorePacket = new ServerSetScorePacket();
		setScorePacket.action = ScoreAction.REMOVE;
		setScorePacket.entries = [
			{
				scoreboard_id: 1,
				objective_name: this.objectiveName,
				score: score,
				entry_types: EntryType.TEXT,
				entity_unique_id: undefined,
				custom_name: "",
			},
		];
		setScorePacket.writePacket(this.player);
	}

	/**
	 * Deletes the scoreboard
	 */
	deleteScoreboard() {
		let shouldDelete = true;

		Frog.eventEmitter.emit("scoreboardDelete", {
			scoreboard: this,
			cancel: () => {
				shouldDelete = false;
			},
		});

		if (!shouldDelete) return;

		const removeScoreboard = new ServerRemoveObjectivePacket();
		removeScoreboard.objective_name = this.objectiveName;
		removeScoreboard.writePacket(this.player);
	}
}

module.exports = Scoreboard;
